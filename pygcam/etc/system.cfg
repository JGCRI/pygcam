[DEFAULT]

GCAM.VersionNumber = 5.1.3

# This project is used if '-P' flag not given to the 'gt' command
GCAM.DefaultProject =

# Linux default is defined here. Can be overridden in
# platform-specific config file (e.g., etc/Darwin.cfg,
# etc/Windows.cfg).
GCAM.Executable = gcam.exe

# v5.1 changed gcam-data-system to gcamdata, but we don't know which
# version a project is using until run-time, so we compute this based
# on the version number set by the project.
GCAM.DataDir = gcamdata

# This defines the variable for documentation purposes. The value
# is set automatically in each project section to the name of that
# section -- unless a non-blank value already exists in the section.
GCAM.ProjectName =

# Root directory for where the user keeps project folders
GCAM.ProjectRoot = %(Home)s/projects
GCAM.ProjectDir  = %(GCAM.ProjectRoot)s/%(GCAM.ProjectName)s

# Where to find plug-ins. Internal plugin directory is added
# automatically. Use this to add custom plug-ins outside the pygcam
# source tree. The value is a semicolon-delimited (on Windows) or
# colon-delimited (on Unix) string of directories to search for files
# matching the pattern '*_plugin.py'
GCAM.PluginPath = %(GCAM.ProjectDir)s/plugins

# The location of the GCAM installation to use.
GCAM.RefWorkspace = %(Home)s/GCAM/gcam-v%(GCAM.VersionNumber)s

# Allows user to decide where to create the lockfile, depending on
# the characteristics of the available file systems. By default it
# is created in the newly created copy of the Workspace dir.
GCAM.WorkspaceSemaphoreDir =

# Files to copy or link when creating workspaces and sandboxes. Starting
# with v4.3, many more files appear under input that we do not want to copy.
# Note that input/gcamdata/_common is required since in-memory db
# queries set class path to reference the ModelInterface.jar found under this.
GCAM.InputFiles.all = input/climate input/extra input/magicc input/policy input/solution input/%(GCAM.DataDir)s/xml
GCAM.InputFiles.4.3 = %(GCAM.InputFiles.all)s input/gcam-data-system/_common
GCAM.InputFiles.4.4 = %(GCAM.InputFiles.all)s input/gcam-data-system/_common
GCAM.InputFiles.5.0 = %(GCAM.InputFiles.all)s input/gcam-data-system/_common
GCAM.InputFiles.5.1 = %(GCAM.InputFiles.all)s
GCAM.InputFiles.5.2 = %(GCAM.InputFiles.all)s
GCAM.InputFiles.5.3 = %(GCAM.InputFiles.all)s
GCAM.InputFiles.5.4 = %(GCAM.InputFiles.all)s
GCAM.InputFiles.6.0 = %(GCAM.InputFiles.all)s

# Set at run-time based on the current project's GCAM version number
GCAM.InputFiles =

# Allow user to add to the list
User.RequiredFiles =

# Hook for Windows and Mac to specify additional files (e.g., Windows DLLs)
GCAM.SysRequiredFiles =

GCAM.RequiredFiles = %(User.RequiredFiles)s exe/%(GCAM.Executable)s %(GCAM.InputFiles)s exe/log_conf.xml exe/XMLDBDriver.jar %(GCAM.SysRequiredFiles)s

# Files to link from the reference workspace to run-time workspace.
# If linking fails on Windows or GCAM.CopyAllFiles = True, files are
# copied instead. Note that unrecognized files here are ignored, with
# a WARNING message identifying them.
GCAM.WorkspaceFilesToLink = %(GCAM.InputFiles)s

# Same as above, for files to link from the run-time workspace to sandboxes.
# See OS-specific files for possible override.
GCAM.SandboxFilesToLink = %(GCAM.InputFiles)s exe/%(GCAM.Executable)s

# The reference config file to use as a starting point for "setup"
GCAM.RefConfigFile = %(GCAM.RefWorkspace)s/exe/configuration_ref.xml

# The path separator defaults to ":" but is overridden in Windows.cfg
# to be ";" since ":" appears after drive specifiers in Windows paths.
PATHSEP = :

# QueryPath is string with one or more colon-delimited elements that
# identify directories or XML files in which to find batch query
# definitions.
GCAM.QueryDir  = %(GCAM.ProjectDir)s/queries
GCAM.QueryPath = %(GCAM.QueryDir)s%(PATHSEP)s%(GCAM.RefWorkspace)s/output/queries/Main_queries.xml

# File that defines query rewrites by name for use by query command.
# GCAM.RewriteSetsFile = %(GCAM.ProjectDir)s/etc/rewriteSets.xml
GCAM.RewriteSetsFile =

# Where query output is written if no output dir is specified on
# command-line to "query" sub-command.
GCAM.OutputDir = %(Home)s/tmp

# The location of GCAM source code (for the purpose of reading
# the .csv file that defines the current regional aggregation.
GCAM.SourceWorkspace =

# If using the XML "setup" system, this is the root folder for
# setup source files
GCAM.XmlSrc = %(GCAM.ProjectDir)s/xmlsrc

# The default input file for the runProj sub-command
GCAM.ProjectXmlFile = %(GCAM.ProjectDir)s/etc/project.xml

# Default dir for CSV template files generated by res, transport, and building sub-cmds
GCAM.CsvTemplateDir = %(GCAM.ProjectDir)s/etc

# Whether GCAM should generate a debug file (no value => no change)
GCAM.WriteDebugFile =

# Whether GCAM should generate a price file (no value => no change)
GCAM.WritePrices =

# Whether GCAM should generate the large XML file with the combined data
# from all input files. (no value => no change)
GCAM.WriteXmlOutputFile =

# Whether GCAM should generate outFile.csv (no value => no change)
GCAM.WriteOutputCsv = False

# Whether to write out restart files
GCAM.WriteRestartFiles = True

# Path to an XML file describing land protection scenarios
GCAM.LandProtectionXmlFile =

# Path to an XML file describing an RES policy, an input to the "res" sub-command
# If it's a relative path, it's treated as relative to %(GCAM.ProjectDir)s/etc.
GCAM.RESDescriptionXmlFile = RES_description.xml

# Path to an XML file that implements an RES policy, the output of the "res"
# sub-command. If it's a relative path, it's treated as relative to
# %(GCAM.SandboxRefWorkspace)s/local-xml/{scenario}, where the scenario must
# be given as an argument to the "res" sub-command.
GCAM.RESImplementationXmlFile = RES_implementation.xml

# Default location in which to look for scenario directories
GCAM.ScenariosDir =

# The pathname of the XML scenario setup file.
GCAM.ScenarioSetupFile = %(GCAM.ProjectDir)s/etc/scenarios.xml

# Where to save expanded XML when using "iterators" in XML setup.
# This is optional and provide to aid in debugging setups.
GCAM.ScenarioSetupOutputFile =

# Set this to identify the subclass of XMLEditor to use as a
# superclass to generate a class to process your XML-based
# scenario setup. Uses XMLEditor as a superclass by default.
# The format of this option is:
#   {path to module directory}:{module.dot.specification}, e.g.
#
# GCAM.ScenarioSetupClass = %(Home)s/somewhere/pygcam:pygcam.sectorEditors.BioenergyEditor
#
GCAM.ScenarioSetupClass =

# User can set this to force location of Java, e.g., if automated method fails to find it
GCAM.JavaHome =

# ModelInterface directory for the version to use. This is now set dynamically in
# tool.py after the project is set, so we know which version of GCAM is in use. The
# subdir is 'input/gcam-data-system/_common/ModelInterface/src' through v5.0. Starting
# with 5.1 it is 'output/modelinterface'.
GCAM.MI.Subdir =

GCAM.MI.Dir = %(GCAM.RefWorkspace)s/%(GCAM.MI.Subdir)s

GCAM.MI.JarFile = %(GCAM.MI.Dir)s/ModelInterface.jar

# This is set dynamically to True on Linux (deprecated for GCAM 4.3)
GCAM.MI.UseVirtualBuffer = False

# The location of the libraries needed by ModelInterface. This is correct for v4.3 and v4.4.
GCAM.MI.ClassPath = %(GCAM.RefWorkspace)s/libs/jars/*%(PATHSEP)s%(GCAM.MI.JarFile)s%(PATHSEP)sXMLDBDriver.jar

# Arguments to java to ensure that ModelInterface has enough heap space.
GCAM.MI.JavaArgs = -Xms512m -Xmx2g

# Command to run ModelInterface interactively
GCAM.MI.Command = java %(GCAM.MI.JavaArgs)s -cp %(GCAM.MI.ClassPath)s ModelInterface/InterfaceMain

# Command to run batch queries
GCAM.MI.BatchCommand = %(GCAM.MI.Command)s -b "{batchFile}"

# Query file to use for interactive use of ModelInterface. If this file
# doesn't exist, GCAM.MI.RefQueryFile is used.
GCAM.MI.QueryFile = %(GCAM.QueryDir)s/Main_Queries.xml

# The query file to use if GCAM.MI.QueryFile does not point to an actual file
GCAM.MI.RefQueryFile = %(GCAM.RefWorkspace)s/output/queries/Main_queries.xml

# Name of log file to catch verbose ModelInterface output. If specified
# as a relative path, is interpreted as relative to the batch output dir.
# An absolute pathname is used as is. Set this to /dev/null on Unix to
# trash the output.
GCAM.MI.LogFile = mi.log

# The name of the database file (or directory, for BaseX)
GCAM.DbFile	= database_basexdb

# Columns to drop when processing results of XML batch queries
GCAM.ColumnsToDrop = scenario,Notes,Date

# Change this if desired to increase or decrease diagnostic messages.
# A default value can be set here, and a project-specific value can
# be set in the project's config file section.
# Possible values (from most to least verbose) are:
# DEBUG, INFO, WARNING, ERROR, CRITICAL
GCAM.LogLevel = INFO

# The default location in which to find or create GCAM runtime sandboxes
GCAM.SandboxRoot = %(Home)s/GCAM/sandbox

GCAM.SandboxProjectDir = %(GCAM.SandboxRoot)s/%(GCAM.ProjectName)s

# Identifies the location of the workspace copy used to create
# new sandboxes. The workspace is created on demand.
GCAM.SandboxRefWorkspace = %(GCAM.SandboxProjectDir)s/Workspace

# N.B. These are set at run-time in project.py and are available
# with the "run" sub-command. SandboxDir is the directory under
# which sandboxes are created
# ScenarioGroup is set in project.py if <ScenarioGroup> sets
# useGroupDir="1". Thus the variable is available only via the
# run sub-command.
GCAM.ScenarioGroup =

# Directory in which new sandboxes are created for current project
# and scenario group. ScenarioGroup may be empty, but this doesn't
# affect path construction.
GCAM.SandboxDir = %(GCAM.SandboxProjectDir)s/%(GCAM.ScenarioGroup)s

# If set, application logger messages are written here. Note that
# this is different than the GCAM.BatchLogFile for batch job output.
GCAM.LogFile = %(GCAM.SandboxRoot)s/log/gt.log

# Show log messages on the console (terminal)
GCAM.LogConsole = True

# Format strings for log files and console messages. Note doubled
# '%%' required here around logging parameters to avoid attempted
# variable substitution within the config system.
GCAM.LogFileFormat    = %%(asctime)s %%(levelname)s %%(name)s:%%(lineno)d %%(message)s
GCAM.LogConsoleFormat = %%(levelname)s %%(name)s: %%(message)s

# If GCAM.BatchLogFile or the --logFile arg to gt is not an absolute
# path (i.e., the path portion of the logFile does not start with '/',
# with Windows paths converted to Unix format), then batch log files
# are created relative to this directory.
GCAM.BatchLogDir = %(GCAM.SandboxDir)s/log

# Save batch log messages in the indicated file. Default is set up
# for SLURM, which replaces "%j" with the jobid. Note that "%" must
# be doubled (%%) so that it's not interpreted by configparser.
GCAM.BatchLogFile = gt-%%j.out

# The directory above the 'queryResults' and 'diffs' dir where CSV
# files are written to as a result of queries and diff commands.
# GCAM.BatchOutputRoot = %(GCAM.SandboxDir)s

# Set to True to keep XML database in memory, running queries defined
# in the generated XMLDBDriver.properties file based on list of queries
# defined in project. Setting GCAM.InMemoryDatabase to True implies that
# both GCAM.MultipleBatchQueries and GCAM.RunQueriesInGCAM are True.
GCAM.InMemoryDatabase = False

# Set to False to use old method of running ModelInterface anew for each query.
# Default creates a single batch file with multiple queries, invoking MI once.
# Setting GCAM.InMemoryDatabase to True implies that GCAM.MultipleBatchQueries
# is True since this is the only way to extract results from GCAM.
GCAM.BatchMultipleQueries = True

# If True, we expect GCAM to run batch queries before exiting. This is
# typically used with the in-memory database, but works otherwise, too.
# When False, an XMLDBDriver.properties file is written with an empty
# batch-query element. Setting GCAM.InMemoryDatabase to True implies
# that GCAM.RunQueriesInGCAM is True, but queries can still be run in
# GCAM when the XML database is written to disk. Setting this parameter
# to True implies that GCAM.BatchMultipleQueries is True since this is
# the only way to run multiple queries internally in GCAM.
GCAM.RunQueriesInGCAM = False

# The name of an STX:template filter file to use when writing the database
# See http://jgcri.github.io/gcam-doc/user-guide.html#controling-the-level-of-xml-db-output
# for details
GCAM.FilterFile =

# The name of the queue used for submitting batch jobs on a cluster.
# On SLURM, you can request multiple queue, taking first one available.
GCAM.DefaultQueue = slurm

# Notes:
# - "bsub -Is bash" for interactive jobs
# - "bqueues -u $USER" for queues avail to user
# - "bsub -P project_name ..." to specify an "account"
# See https://www.ibm.com/support/knowledgecenter/en/SSWRJV_10.1.0/lsf_welcome/lsf_welcome.html
LSF.BatchCommand    = bsub -q {queueName} -n 1 -J {jobName} -W {walltime} -R "rusage[mem=6000]" -eo {logFile} {dependencies} %(GCAM.OtherBatchArgs)s {scriptFile}
LSF.JOB_ID_VAR      =

PBS.BatchCommand    = qsub -q {queueName} -N {jobName} -l walltime={walltime} -e {logPath} -m n -j oe {dependencies} %(GCAM.OtherBatchArgs)s {scriptFile}
PBS.JOB_ID_VAR      = PBS_JOBID

SLURM.BatchCommand  = sbatch -p {partition} -J {jobName} -t {walltime} -e {logFile} -o {logFile} --nodes=1 --get-user-env=10L {dependencies} %(GCAM.OtherBatchArgs)s {scriptFile}
SLURM.JOB_ID_VAR    = SLURM_JOB_ID

# Set this to 'after' to run dependencies even if baseline fails (SLURM only)
SLURM.DependencyFlag = afterok

# Arbitrary arguments to add to the selected batch command
GCAM.OtherBatchArgs =

# Known values currently are SLURM, PBS, and LSF
GCAM.BatchSystem = SLURM

GCAM.BatchCommand = %(SLURM.BatchCommand)s

# For qsub, the default number of minutes to allocate per task.
GCAM.Minutes = 20

# A file that maps GCAM regions to rename them or to aggregate
# them. Each line consists of a GCAM region name, some number of
# tabs, and the name to map the region to.
GCAM.RegionMapFile =

# Where to create temporary files
GCAM.TempDir = /tmp

# Where to create temporary batch scripts to run gcamtool.py on a
# compute node. Note that this should not be set to a directory
# that is machine-specific (such as "/tmp"), since the file needs
# to be visible from compute nodes. The directory is created if needed.
GCAM.UserTempDir = %(Home)s/tmp

# For Windows users without permission to create symlinks
GCAM.CopyAllFiles = False

# For debugging purposes: gcamtool.py can show a stack trace on error
GCAM.ShowStackTrace = False

# If set, this format is applied to columns holding values for years
# when combining CSV files into XLSX files.
GCAM.ExcelNumberFormat = 0.000

# TextEditor to open via the --edit option to the 'config' sub-command
GCAM.TextEditor = vi

# Logging level for the Flash web server underlying dash-based GUIs
Flask.LogLevel = WARN

# New code that might not work in all versions, so user can set this to False to disable
GCAM.RegionDiscovery = True

# Allow user to supply a function to filter GCAM's stdout stream when using the "GCAM wrapper"
# If not set, uses the built-in gcam._wrapperFilter. Value should be module.function if module
# is in python path, or directory;module.function to specify where the module (.py) is found.
GCAM.WrapperFilterFunction =
