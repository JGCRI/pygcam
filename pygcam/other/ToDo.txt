For code release
================

Document
--------
- Assumptions behind setup code
  - scenarios.xml
  - custom editor sub-class
    - methods to implement and when they are called

Cleanup
-------
- Consolidate generic code from sectorEditors and xmlEditor

Features
--------
- New @query flag: "-rewrite regions8,crops" # replaces what's in project.xml

If scen name is unique, determine the group

- Allow <comment>s to nest. Not the case in scenarios.xml currently. Not clear why.


Testing
-------
- test all subcommands
  - config (ok)
  - diff
  - gcam
    Modes to test
    - run using ref workspace, from anywhere (ok)
    - standard project.xml mode (ok)
    - standalone, but with new sandbox (ok)
    - MCS mode
  - new (ok)
  - run (retest batch command and args)
  - protect
  - query
  - setup
  - sandbox (mostly ok, but setup.createSandbox might be broken for groupDir case)

- setup.py installer: test with full install
- On Windows: test that CopyAllFiles is set to True automatically if linking fails.
- Test bioconstraint command -- maybe move out?

- Generalize the idea of reading baseline result and setting constraints to that
  level or some delta from that level.

- Eliminate generators from scenarios.py and use project.xml @setup instead.

Bugs
====
- There's a subtle problem with repeated use of GcamTool as top-level call.
  First symptom is query list is repeated. Seems to be stale state from
  prior invocation, suggesting a need to re-initialize (class vars?) when
  called from top-level.
  - in any case, all the start-up stuff is rerun needlessly, currently


Cleanup
=======
- the term "batch" is confusing since used for SLURM batch and XML query batch

- Rationalize batchQuery.log and GCAM.MI.LogFile in query.py

- Handling of subdir and groupDir is confusing and needs to be rationalized
  - constraint generation
  - queries
  - setup


MCS-only
--------
- @setup should call the prequery when GCAM.BatchMultipleQueries
  so this is done just once for all trials

Test
====
- Finish implementing/testing the queryFile and rewriteSets features
- write more unit tests
- Test constraint cmds
- Should constraint commands be converted back to plugins?
    - They're for use by biofuel studies only (maybe a sep plugin dir?)
    - Perhaps split out generic function from domain-specific

Features
========

Near-term
---------
- ?

Medium-term
-----------
- If scenario has unique name among groups, run it even if group isn't specified?
    - Will require restructuring since it's assumed there's one group name

Long-term
---------
- Allow plotting a marker at the total for a bar

- Allow overlay of, say, line chart using right Y axis on barchart
  using left Y axis, as in "US Land Cover and LUC Emissions"

- Generalize as many of the Bioenergy and Refining methods as possible
    - Goal should be to not need any sector-based methods

- Generate multi-plot figures, or at least generate data in a useful format.

===========
=== MCS ===
===========
- To try:
  - Move run dir back to /pic/scratch/plev920

Overarching
-----------
- Could also re-architect it around master/worker model
  - Define an Abs Base Class describing what is run by a worker
    - Mostly communication protocol, signal handling, and the like
  - Master is the only process to communicate with database, so it
    can safely use sqlite3, which is more convenient for moving data
    between cluster and desktop.
  - Distribute the generation of input files based on a single CSV
    file containing all the trial data. The gensim command just generates
    the CSV file rather than modifying all the XML files.
    - Splitting trial data generation from XML file manipulation allows
      use of DAKOTA, EMA, or other methods to generate trials.

- Good time to update the database as well.
  - Denormalize to make it easier to work with (put runId in some other tables?)
  - Create a project table that links to runs so this can work under a
    single postgresql database?

- Rethink the "template" directory. This is underutilized and a little confusing.

- Reimplement subcommands as pygcam plugins using pygcam.mcs.*

- Integrate XML parsing code with pygcam's

MCS Integration
---------------
- Test pyfunc capability and use it to generate protected areas based on distro.
- Failure to run diffs is being reported by Runner.py as success
- Consolidate mcs/scenarios.xml with etc/scenarios.xml

MCS Bugs
---------
- Creating the new database on PIC doesn't properly drop old tables first.
- This means changes to GCAM.Years aren't handled correctly.
  - Perhaps just have cols for all years from 2005-2100?

MCS Cleanup
-----------
- Eliminate mcs/scenarios.xml file; this information can be found in project.xml
- Test "constant" distro
- Test (or deprecate) FileChooser
- Test xml db exists before running queries and raise a more targeted error
- If stacked jobs are not yet running, but aborted, set status in db accordingly
  - not needed in using master/worker architecture
  - might also be possible to use sqlite in this approach; only master writes

- When creating the run workspace, make all regular files read-only:

    find . -type f -print0 | xargs -0 chmod -w

- Incorporate SALib
    - Optionally Use delta method from SALib instead of the CB method.

Migration to worker model
-------------------------
- Can be even simpler than jug given that we have a database available
- Bust out gensim loop innards to run this in separate worker processes
    - Have gensim just write a csv file with trial data
        - each worker reads their own row and generates XML as needed
    - need to normalize column-names somehow
        - if independent vars, colname[index] ?
- Each worker finds next available run, runs it, repeats until no more
- Batch a script like the following, where the # workers depends on config var:
    for i in {1..$x}
    do
        runWorker &
    done
    wait    # waits for all children to complete

- Easier than python method below

    procs = []

    # check for exited children on signal
    def reap():
        for proc in procs:
            if proc.poll():
               procs.remove(proc)
               del proc # to avoid zombies

    signal(signal.SIGCHLD, reap)

    for i in range(count):
        proc = Popen('runworker')
        procs.append(proc)

    while procs:
        sleep(60)


MCS docs
--------
- New <Parameter active="0"> attribute

- changes to XML format and validation
    - pygcam and also gcammcs (results, parameters, scenarios)

MCS Notes
---------
- Needs wrapper (runner.py) or jug-type master-slave approach
    - master-slave avoids stacking jobs in advance
    - jug handles tracking incomplete jobs

- Using jug
    - Slave asks for next task
        - identified by path to .json file, which has all needed args
    - Does stuff that runner.py does now
        - signal handling
        - sets per-task alarm
        - database updates (unless jug results mgmt obviates this)
        - returns status or tuple/dict with more info?

Useful command:

    gcammcs iterate -s1 -e corn -t0,7-11 -c 'gt mcs -S corn -s CI --sandbox {trialDir} --localXml {expDir}/local-xml'


GUI implementation
==================
- Focus on "project"
- Create and edit project.xml
- Run a project
    - select groups, scenarios, and steps to run (checkboxes)
    - select direct or batch mode
        - if direct, show output in window
    - have a 'kill' command for local or batch (sdel?)
- View & update config file


GCAM enhancements to simplify scripting
=======================================
1. Report more meaningful exit statuses

ModelInterface fails but exits with 0 status. GCAM seems to consistently exit with status 1 when it fails.

Ideally, there would be a small number of status codes so a script can do the right thing. Currently I
have to parse error output, which is a nuisance and not robust in the long run.

Useful GCAM exit codes
  0 = success
  1 = failed to read a config file or xml file referenced therein
  2 = failed to solve markets in some period (alternatively, the status could be the failed timestep)

I’m not sure if there are other failure modes.

Useful MI exit codes
  0 = success
  1 = failed to read a batch file or a query file
  2 = query failed (syntax error in XPath, presumably)
  3 = query returned no data (may not always be an error)

2. Quit upon on failure to solve.

When GCAM fails to converge, the task often eats up the entire time allocation spinning uselessly.
If there are reasons that this is sometimes useful, then a cmd-line flag that indicates to quit on
market failure would be helpful. (Or make this the default and have a flag to not quit.)

As it is I’ll probably write code to parse model output to detect this. But it’s generally a waste
of time.

Look for "^ERROR:Currently Unsolved Markets:"

After failing to solve in one or more periods, the climate model is still called, the database is
written, and the model reports:

    Model run completed.
    Model exiting successfully.
