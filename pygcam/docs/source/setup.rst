``pygcam.setup``
================

This module defines common variables, functions, and classes for manipulating
XML files to setup GCAM modeling experiments.

The basic approach is to create a directory for each defined scenario,
in which modified files and a corresponding configuration XML file
are stored.

To allow functions to be called in any order or combination, each
checks for a local copy of the file to be edited, and if not present,
copies the original file to the local directory. Local copies are
modified in place. Each function updates the local config file
so that it loads the modified file.

XML Starlet
-----------
The ``setup`` module relies on the XML Starlet
program, a command-line tool that can search and edit XML files (among other
tricks.) It is available for all three GCAM platforms.
`Download XML Starlet <http://xmlstar.sourceforge.net/download.php>`_.
It should be included on Linux systems. It is available in binary (executable)
form for Windows, but must be compiled on Mac OS X.

Rationale
-----------
The R-based gcam-data-system (GDS) that comes with GCAM is an excellent
method for managing the core GCAM input files. It is an essential tool for
changing global parameters such as GDP and population whose influence spans
multiple values across XML files.

The GDS, however, is relatively "heavy-weight". Modifying input files
is accomplished most safely by copying the entire ``gcam-data-system``
directory, modifying some CSV inputs, and regenerating the XML
files. This approach doesn't facilitate small-scale changes in select
files. Nor does it address changes to configuration files.

A more subtle issue with relying on the GDS is that any changes to
data values in CSV files must be documented outside the CSV
files. Separating changes from the documentation of those changes
eventually results in divergence between the two.

A lighter-weight approach is to modify the XML files generated by the
R-based system. Manually editing XML files is relatively easy to do,
but keeping files synchronized--so that policy files include all the
changes made in baseline files, for example--is a manual process, and
therefore error-prone.

The GCAM XML-Setup tools were designed to address all of these issues.

XML Setup Tools
^^^^^^^^^^^^^^^^

The Setup Tool system is a based on a Python module that operates
on standard GCAM input XML files to create modified copies of
designated files and to manage corresponding modifications to the
configuration.xml file. The system can be thought of as an API to
XML files controlling much of GCAM's behavior.

The user-defined Python scripts and any hand-coded XML files
constitute the "source code" used to generate XML data and
configuration files described by the scripts. The generated XML files
are written to a ``local-xml`` folder identified by the user's setup
script.

The module includes a "scenario" class that identifies scenarios
relationships, i.e., that a given policy scenario is based on a
particular baseline scenario. The structure can have an arbitrary
number of layers. For example, a "bioenergy baseline" scenario may be
shared across several analyses, each of which refines the shared
scenario to create a baseline specific to the analysis.

Core functionality
^^^^^^^^^^^^^^^^^^^^

The setup module provides functions that automate the manipulation of XML files, including:

  * Creation of a ``local-xml`` folder in a user-specified location, and per-project folders
    within ``local-xml`` to organize files used for different analyses.

  * Programmatically editing input XML files by copying the designated
    files from the "parent" scenario and creating scenario-specific
    versions within the local-xml project folder. Editing is performed
    using the ``xmlstarlet`` command-line program.
    (See http://xmlstar.sourceforge.net)

  * Likewise, the parent scenario's ``config.xml`` file is copied
    and modified as indicated by the scenario setup script.

  * Automation of arbitrarily complex, multi-file changes ensures that
    all required changes are handled correctly and consistently.

  * Support for dynamically generating policy constraint files that
    compute constraint values based on baseline scenario results. This
    is used primarily for Monte Carlo simulations, in which the
    baseline results for each trial generally differ.

  * Generic GCAM XML functions:

    * Set scenario name, stop period, climate output interval, solution
      tolerance.

    * Add, update, and delete scenario components from
      configuration.xml.

    * Add policy definition and constraint file pairs.

    * Extract a definition from the global technology database and
      create a regional copy for further customization.

    * Currently defined functions can modify performance coefficients,
      non-energy-cost, shutdown rate for specified technologies, residue supply curves,
      and more.


Main benefits
^^^^^^^^^^^^^^^^

  * Automates and simplifies modification of XML files. Less
    error-prone than manually editing these files.

  * Documents changes made to the standard GCAM setup, without
    requiring maintenance of ancillary files. (The script becomes
    the documentation.)

  * Facilitates management of scripts (rather than large XML files) in
    a version control system such as ``svn`` or ``git``.

  * Centralizes common functionality. Modifications to the Python
    module are immediately available to all projects.

  * Simplifies synchronization between baseline and policy scenarios:
    after updating the baseline script (adding constraints, changing
    stop-period, etc.), re-running the policy setup scripts keep
    everything synchronized.

API
----

.. automodule:: pygcam.setup
   :members:


Sector-specific config editors
-------------------------------

These classes subclass ConfigEditor to create sector-specific setup functionality.

.. automodule:: pygcam.sectorEditors
   :members:
