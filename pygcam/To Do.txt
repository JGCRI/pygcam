Bugs
----

Cleanup
-------
- Eliminate "scenarios.xml" from gcammcs? Obviated by project.xml?
  - Check whether it's used by gcammcs

Test
----
- setup.py installer
- write more unit tests
- changes to XML format and validation
    - pygcam and also gcammcs (results, parameters, scenarios)
- land protection command

Features
--------
- If scenario has unique name among groups, run it even if group isn't specified?
    - Will require restructuring since it's assumed there's one group name

- Make project <defaults> optional.

- Specify a simple project without writing custom python code.
    - Create xmlsrc
    - Use built-in scenarios.py that just needs scenario names,
      called from runProj
    - <scenario> has a <files> section similar to configuration.xml
    - support a delete="true" attribute
    - Use stopYear to limit run

- A "simple" project either:
    - Has manually creates sandboxes
    - Has generated sandboxes, but the project only adds to and
      removes from configuration.xml with references to local files.

- Code doesn't use XmlEditor
    - Already supported using scenarios.py

- Advantages of this setup
    - Standardized and documented format
    - Easily transition to using additional pygcam features
    - Simplifies sharing of experiments, e.g., via git

Other

- Generalize as many of the Bioenergy and Refining methods as possible
    - Goal should be to not need any sector-based methods

- Integrate gcam-driver code / ideas
    - Consider re-implementing using jug

- Make seq="x" optional in project <step> definitions; use order as defined.
  If user is not overriding any steps (most common use case), explicit seq
  nums are not needed.
  - Another option is to have an explicit <step after="stepname">, to create
    dependence DAG, which leads toward gcam-driver type of functionality.

- Get "runProj" working on cluster.
    - Initially, migrate job-related options now on "gcam" subcommand to
      the "runProj" subcommand?

- pygcam/etc/site.cfg
    - see what happens with this on installation via setup.py
    - would be much better outside the installed module
    - maybe have a setup arg that says where to symlink to for site.cfg

- Add common "--commandArgs" to pass args to the sub-command

Document
--------
- Document the Subcommand (plugin) protocol
    - class 'Plugin' or variable PluginClass which identifies classname
    - addArgs()
    - run(args, tool)
    - when it gets loaded and run
    - other suggestions, e.g., plugins should use logging

- Assumptions behind setup code

- Adding otaq2016.pth or other project-specific code

Tasks
-----
- Modify CI command to use Marshall's query results
- Have CI command take a flag to generate CI. Maybe this is redundant with fuelEJ.txt?
- Test diff cmd
- Test constraint cmds
- Test land protection cmd
    - Simplify to eliminate complicated cmdline opts?
- Should constraint commands remain plugins?
    - They're for use by biofuel studies only?
    - Perhaps split out generic function from domain-specific
- Update documentation
- Test everything again on Windows
