Test
----
- setup.py installer
- write unit tests
- changes to XML format and validation
    - pygcam and also gcammcs (results, parameters, scenarios)
- land protection

Cleanup
-------
- Eliminate "scenarios.xml" from gcammcs? Obviated by project.xml?
- Relocate app-specific code currently in chart.py.
- Deprecate configVar option to <var> all config vars are now read.
- Handle deletion of temporary files better
    - Have a class that generates and remembers the filenames and
      can delete them all
    - Call TempFile.removeFiles() in gcamtool in a "finally" clause
- Consider whether QueryPath should be set in project file to avoid
  having all users to set this in private .pygcam.cfg files

Features
--------

- Generalize as many of the Bioenergy and Refining methods as possible
    - Goal should be to not need any sector-based methods

- Integrate gcam-driver code / ideas
    - Consider re-implementing using jug

- Make seq="x" optional in project <step> definitions; use order as defined.
  If user is not overriding any steps (most common use case), explicit seq
  nums are not needed.
  - Another option is to have an explicit <step after="stepname">, to create
    dependence DAG, which leads toward gcam-driver type of functionality.

- Get "runProj" working on cluster.
    - Initially, migrate job-related options now on "gcam" subcommand to
      the "runProj" subcommand?

- pygcam/etc/site.cfg
    - see what happens with this on installation via setup.py
    - would be much better outside the installed module
    - maybe have a setup arg that says where to symlink to for site.cfg

Document
--------
- Document the Subcommand (plugin) protocol
    - class 'Plugin' or variable PluginClass which identifies classname
    - addArgs()
    - run(args, tool)
    - when it gets loaded and run
    - other suggestions, e.g., plugins should use logging

- Assumptions behind setup code

- Adding otaq2016.pth or other project-specific code

Tasks
-----
- Modify CI command to use Marshall's query results
- Have CI command take a flag to generate CI. Maybe this is redundant with fuelEJ.txt?
- Test diff cmd
- Test constraint cmds
- Test land protection cmd
    - Simplify to eliminate complicated cmdline opts?
- Should constraint commands remain plugins?
    - They're for use by biofuel studies only?
    - If so, setup.py can call these by importing them directly.
    - Perhaps split out generic function from domain-specific
- Update documentation
- Test everything again on Windows
