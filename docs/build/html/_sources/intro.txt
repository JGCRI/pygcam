Introduction to ``pygcam``
==================================

*This package is currently under development.*

The ``pygcam`` package comprises a set of Python modules and a main driver script designed
to facilitate a more efficient workflow using
`Global Change Assessment Model <http://www.globalchange.umd.edu/models/gcam>`_ (GCAM).

The tools are intended to meet the needs of different types of users, from basic users who just
want to run the model, to "power" users interested in writing custom scripts, to software developers
wanting to write new tools like graphical user interfaces for working with GCAM.

The main components include:

  * **Software libraries** that simplify development of higher-level software tools (graphical interfaces, scripts)
    that interface with GCAM. The library will provide an Application Programming Interface (API) to the GCAM input
    and output data, and to running GCAM, querying results, and performing common processing tasks such as computing
    differences between policy and baseline scenarios and plotting results.

  ..

  * **Command-line tools** built upon the library described above to package commonly required functionality into a convenient
    form for direct use and to support development of higher-level, custom scripts. (See :doc:`gcamtool` for details.)

  ..

  * **A Monte Carlo Simulation framework** using GCAM on high-performance computers, allowing users to explore
    uncertainty in model outputs resulting from uncertainty in model inputs, and to characterize the contribution of
    individual parameters to variance in output metrics.

  .. * (Eventually) **Graphical User Interfaces** that simplify use of the libraries and tools as well
     as providing unique capabilities such as graphical exploration and comparison of sets of model
     results.

  * **User documentation** for all of the above.

  ..

  * **Cross-platform capability** on Windows, Mac OS X, and Linux.

  ..

  * **Installer scripts** to simplify installation of tools on usersâ€™ computers.

Users can control many aspects of ``pygcam`` through a :doc:`configuration file <config>`
found in ``${HOME}/.pygcam.cfg``. When :doc:`gcamtool` is run the first time, a
configuration file is created, with all configuration options commented out and
showing their default values.

The main script (:doc:`gcamtool`) implements several "subcommands" that perform various
steps in a typical GCAM analysis. The script implements a :doc:`plug-in <subcommand>`
architecture allowing users to customize :doc:`gcamtool <gcamtool>` and avoid a proliferation of scripts.

   * The ``runProj`` subcommand reads an XML input file and runs one or more steps of an analysis,
     and these steps can (typically will) invoke other subcommands as required.

   * The ``gcam`` subcommand runs the GCAM model in any indicated directory. Links to a
     reference GCAM directory are used when possible to avoid needless file copying.

   * The ``query`` subcommand executes named batch queries, and supports regional aggregation
     described in a region mapping file.

   * The ``diff`` subcommand computes the differences between two sets of GCAM results found
     stored in .CSV files in the format generated by the ``query`` subcommand.

   * The ``chart`` subcommand generates bar or line graphs, with a large number of command-line
     arguments to customize chart appearance.

   * The ``protect`` subcommand generates XML input files that define custom land-protection scenarios.

Also see the :doc:`setup` documentation to for information on programmatically modifying
copies of GCAM XML files. This "setup" step can be one of the commands called by ``runProj``.


Managing Scenarios
------------------

In GCAM, a *scenario* is just a name assigned within a configuration
file to distinguish runs of GCAM. The scenario name is set in GCAM's
configuration.xml and appears in the upper-left panel of the ModelInterface
application.

In ``pygcam``, the *scenario* concept is made more helpful by implementing
a few simple conventions regarding directory structure and filenames. Using
a consistent structure simplifies use of the library and tools since more
information can be conveyed through the scenario name. The "setup tools" (to
be documented) follow these conventions when generating modified XML, allowing
the other workflow scripts to find the resulting files.

Scenario conventions
^^^^^^^^^^^^^^^^^^^^

We extend the definition of *scenario* to identify a set of XML files that
are used together. In this approach, "scenario" refers to both the name
assigned in a configuration.xml file and a corresponding directory holding
customized XML files, and a configuration file called ``config.xml``.


Managing multiple workspaces
----------------------------

The tools are most convenient to use if you follow the file layout created by
the "setup tools". It is not required to use these tools or this file structure,
but everything is designed to simplify coordination between the programs.
Many of these (absolute and relative) directory locations can be modified to
suit your preferences via the ``pygcam`` configuration file.

This file layout assumes you have multiple projects, and each project involves
multiple baseline and policy scenarios. These project files can all be stored in
a central GCAM work area, which each project folder holding all scenarios for a
project. Consider the following directory structure:

  * ~/workspaces

    * project1

      * scenario.a

        * <custom XML files>
        * config.xml

      * scenario.b

        * <custom XML files>
        * config.xml

    * project2

      * myScenario

        * <custom XML files>
        * config.xml

      * yourScenario

        * <custom XML files>
        * config.xml


With this approach, the script ``queueGCAM.py`` can get the main workspace
location from the variable ``GCAM.WorkspaceRoot`` from the configuration file
``~.pygcam.cfg`` (which, in this approach can be set once for all projects)
and you need only pass the scenario name and project name, allowing the path
to the configuration XML file to computed as
``{GCAM.WorkspaceRoot}/{project}/{scenario}/config.xml``.
